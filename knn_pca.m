function [trainedClassifier, validationAccuracy] = knn_pca(trainingData,n)
% [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% Returns a trained classifier and its accuracy. This code recreates the
% classification model trained in Classification Learner app. Use the
% generated code to automate training the same model with new data, or to
% learn how to programmatically train models.
%
%  Input:
%      trainingData: A table containing the same predictor and response
%       columns as those imported into the app.
%
%  Output:
%      trainedClassifier: A struct containing the trained classifier. The
%       struct contains various fields with information about the trained
%       classifier.
%
%      trainedClassifier.predictFcn: A function to make predictions on new
%       data.
%
%      validationAccuracy: A double containing the accuracy in percent. In
%       the app, the History list displays this overall accuracy score for
%       each model.
%
% Use the code to train the model with new data. To retrain your
% classifier, call the function from the command line with your original
% data or new data as the input argument trainingData.
%
% For example, to retrain a classifier trained with the original data set
% T, enter:
%   [trainedClassifier, validationAccuracy] = trainClassifier(T)
%
% To make predictions with the returned 'trainedClassifier' on new data T2,
% use
%   yfit = trainedClassifier.predictFcn(T2)
%
% T2 must be a table containing at least the same predictor columns as used
% during training. For details, enter:
%   trainedClassifier.HowToPredict

% Auto-generated by MATLAB on 04-Mar-2022 13:40:54


% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'pca_values1', 'pca_values2', 'pca_values3', 'pca_values4', 'pca_values5', 'pca_values6', 'pca_values7', 'pca_values8', 'pca_values9', 'pca_values10', 'pca_values11', 'pca_values12', 'pca_values13', 'pca_values14', 'pca_values15', 'pca_values16', 'pca_values17', 'pca_values18', 'pca_values19', 'pca_values20', 'pca_values21', 'pca_values22', 'pca_values23', 'pca_values24', 'pca_values25', 'pca_values26', 'pca_values27', 'pca_values28', 'pca_values29', 'pca_values30', 'pca_values31', 'pca_values32', 'pca_values33', 'pca_values34', 'pca_values35', 'pca_values36', 'pca_values37', 'pca_values38', 'pca_values39', 'pca_values40', 'pca_values41', 'pca_values42', 'pca_values43', 'pca_values44', 'pca_values45', 'pca_values46', 'pca_values47', 'pca_values48', 'pca_values49', 'pca_values50', 'pca_values51', 'pca_values52', 'pca_values53', 'pca_values54', 'pca_values55', 'pca_values56', 'pca_values57', 'pca_values58', 'pca_values59', 'pca_values60', 'pca_values61', 'pca_values62', 'pca_values63', 'pca_values64', 'pca_values65', 'pca_values66'};
predictors = inputTable(:, predictorNames);
response = inputTable.Var67;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Train a classifier
% This code specifies all the classifier options and trains the classifier.
classificationKNN = fitcknn(...
    predictors, ...
    response, ...
    'Distance', 'Euclidean', ...
    'Exponent', [], ...
    'NumNeighbors', n, ...
    'DistanceWeight', 'Equal', ...
    'Standardize', true, ...
    'ClassNames', {'N'; 'O'; 'V'});

% Create the result struct with predict function
predictorExtractionFcn = @(t) t(:, predictorNames);
knnPredictFcn = @(x) predict(classificationKNN, x);
trainedClassifier.predictFcn = @(x) knnPredictFcn(predictorExtractionFcn(x));

% Add additional fields to the result struct
trainedClassifier.RequiredVariables = {'pca_values1', 'pca_values10', 'pca_values11', 'pca_values12', 'pca_values13', 'pca_values14', 'pca_values15', 'pca_values16', 'pca_values17', 'pca_values18', 'pca_values19', 'pca_values2', 'pca_values20', 'pca_values21', 'pca_values22', 'pca_values23', 'pca_values24', 'pca_values25', 'pca_values26', 'pca_values27', 'pca_values28', 'pca_values29', 'pca_values3', 'pca_values30', 'pca_values31', 'pca_values32', 'pca_values33', 'pca_values34', 'pca_values35', 'pca_values36', 'pca_values37', 'pca_values38', 'pca_values39', 'pca_values4', 'pca_values40', 'pca_values41', 'pca_values42', 'pca_values43', 'pca_values44', 'pca_values45', 'pca_values46', 'pca_values47', 'pca_values48', 'pca_values49', 'pca_values5', 'pca_values50', 'pca_values51', 'pca_values52', 'pca_values53', 'pca_values54', 'pca_values55', 'pca_values56', 'pca_values57', 'pca_values58', 'pca_values59', 'pca_values6', 'pca_values60', 'pca_values61', 'pca_values62', 'pca_values63', 'pca_values64', 'pca_values65', 'pca_values66', 'pca_values7', 'pca_values8', 'pca_values9'};
trainedClassifier.ClassificationKNN = classificationKNN;
trainedClassifier.About = 'This struct is a trained model exported from Classification Learner R2020b.';
trainedClassifier.HowToPredict = sprintf('To make predictions on a new table, T, use: \n  yfit = c.predictFcn(T) \nreplacing ''c'' with the name of the variable that is this struct, e.g. ''trainedModel''. \n \nThe table, T, must contain the variables returned by: \n  c.RequiredVariables \nVariable formats (e.g. matrix/vector, datatype) must match the original training data. \nAdditional variables are ignored. \n \nFor more information, see <a href="matlab:helpview(fullfile(docroot, ''stats'', ''stats.map''), ''appclassification_exportmodeltoworkspace'')">How to predict using an exported model</a>.');

% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'pca_values1', 'pca_values2', 'pca_values3', 'pca_values4', 'pca_values5', 'pca_values6', 'pca_values7', 'pca_values8', 'pca_values9', 'pca_values10', 'pca_values11', 'pca_values12', 'pca_values13', 'pca_values14', 'pca_values15', 'pca_values16', 'pca_values17', 'pca_values18', 'pca_values19', 'pca_values20', 'pca_values21', 'pca_values22', 'pca_values23', 'pca_values24', 'pca_values25', 'pca_values26', 'pca_values27', 'pca_values28', 'pca_values29', 'pca_values30', 'pca_values31', 'pca_values32', 'pca_values33', 'pca_values34', 'pca_values35', 'pca_values36', 'pca_values37', 'pca_values38', 'pca_values39', 'pca_values40', 'pca_values41', 'pca_values42', 'pca_values43', 'pca_values44', 'pca_values45', 'pca_values46', 'pca_values47', 'pca_values48', 'pca_values49', 'pca_values50', 'pca_values51', 'pca_values52', 'pca_values53', 'pca_values54', 'pca_values55', 'pca_values56', 'pca_values57', 'pca_values58', 'pca_values59', 'pca_values60', 'pca_values61', 'pca_values62', 'pca_values63', 'pca_values64', 'pca_values65', 'pca_values66'};
predictors = inputTable(:, predictorNames);
response = inputTable.Var67;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Perform cross-validation
partitionedModel = crossval(trainedClassifier.ClassificationKNN, 'KFold', 5);

% Compute validation predictions
[validationPredictions, validationScores] = kfoldPredict(partitionedModel);

% Compute validation accuracy
validationAccuracy = 1 - kfoldLoss(partitionedModel, 'LossFun', 'ClassifError');
